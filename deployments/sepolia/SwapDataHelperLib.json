{
  "address": "0xC9a9D11C9AC6ca766EBC97B4C192032105dceA90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "externalId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "receiver",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swapDataB",
          "type": "bytes"
        }
      ],
      "name": "buildOutputMessage",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeCompressedMixSwapParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "mixAdapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "mixPairs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "assetTo",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "directions",
              "type": "uint256"
            },
            {
              "internalType": "bytes[]",
              "name": "moreInfo",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes",
              "name": "feeData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct MixSwapParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "targetZRC20",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstChainId",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "swapDataZ",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "contractAddress",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "swapDataB",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "accounts",
              "type": "bytes"
            }
          ],
          "internalType": "struct DecodedMessage",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "mixAdapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "mixPairs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "assetTo",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "directions",
              "type": "uint256"
            },
            {
              "internalType": "bytes[]",
              "name": "moreInfo",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes",
              "name": "feeData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct MixSwapParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeNativeMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "targetZRC20",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            }
          ],
          "internalType": "struct DecodedNativeMessage",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "fromToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "mixAdapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "mixPairs",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "assetTo",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "directions",
              "type": "uint256"
            },
            {
              "internalType": "bytes[]",
              "name": "moreInfo",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes",
              "name": "feeData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct MixSwapParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5f8eb219f2c33d2bc57de41056bdcf8892428aab48dd58b3ebeaf03333ac6c7",
  "receipt": {
    "to": null,
    "from": "0xfa0d8ebcA31a1501144A785a2929e9F91b0571d0",
    "contractAddress": "0xC9a9D11C9AC6ca766EBC97B4C192032105dceA90",
    "transactionIndex": 239,
    "gasUsed": "785223",
    "logsBloom": "0x
    "blockHash": "0x37947be476ae827b8e1fea0dce4939a9a6acf6b00ceeddc8bd1f835a06b42a7f",
    "transactionHash": "0xa5f8eb219f2c33d2bc57de41056bdcf8892428aab48dd58b3ebeaf03333ac6c7",
    "logs": [],
    "blockNumber": 8315483,
    "cumulativeGasUsed": "31040602",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4f9dc94dafb58dfed436911bf9f5d3e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"externalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swapDataB\",\"type\":\"bytes\"}],\"name\":\"buildOutputMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeCompressedMixSwapParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"mixAdapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"mixPairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"directions\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"moreInfo\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MixSwapParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"targetZRC20\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swapDataZ\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"contractAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swapDataB\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"accounts\",\"type\":\"bytes\"}],\"internalType\":\"struct DecodedMessage\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"mixAdapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"mixPairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"directions\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"moreInfo\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MixSwapParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeNativeMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetZRC20\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct DecodedNativeMessage\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"mixAdapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"mixPairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetTo\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"directions\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"moreInfo\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MixSwapParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SwapDataHelperLib.sol\":\"SwapDataHelperLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/libraries/BytesHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nlibrary BytesHelperLib {\\n    error OffsetOutOfBounds();\\n    function bytesToAddress(\\n        bytes calldata data,\\n        uint256 offset\\n    ) internal pure returns (address output) {\\n        bytes memory b = data[offset:offset + 20];\\n        assembly {\\n            output := mload(add(b, 20))\\n        }\\n    }\\n\\n    function bytesToUint32(\\n        bytes calldata data,\\n        uint256 offset\\n    ) internal pure returns (uint32 output) {\\n        bytes memory b = data[offset:offset + 4];\\n        assembly {\\n            output := mload(add(b, 4))\\n        }\\n    }\\n\\n    function addressToBytes(\\n        address someAddress\\n    ) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(someAddress)));\\n    }\\n\\n    function bytesToBool(\\n        bytes calldata data,\\n        uint256 offset\\n    ) internal pure returns (bool) {\\n        if (offset >= data.length) {\\n            revert OffsetOutOfBounds();\\n        }\\n        return uint8(data[offset]) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xfbeb398977ade0497a46fd947c98bf0a58843c2f9f8a4bb35769cf35c97576ca\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SwapDataHelperLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport {BytesHelperLib} from \\\"./BytesHelperLib.sol\\\";\\n\\nstruct MixSwapParams {\\n    address fromToken;\\n    address toToken;\\n    uint256 fromTokenAmount;\\n    uint256 expReturnAmount;\\n    uint256 minReturnAmount;\\n    address[] mixAdapters;\\n    address[] mixPairs;\\n    address[] assetTo;\\n    uint256 directions;\\n    bytes[] moreInfo;\\n    bytes feeData;\\n    uint256 deadline;\\n}\\n\\nstruct DecodedNativeMessage {\\n    address receiver;\\n    address targetZRC20;\\n    bytes swapData;\\n}\\n\\nstruct DecodedMessage {\\n    address targetZRC20;\\n    uint32 dstChainId;\\n    bytes receiver; // compatible for btc/sol/evm\\n    bytes swapDataZ;\\n    bytes contractAddress; // empty for withdraw, non-empty for withdrawAndCall\\n    bytes swapDataB;\\n    bytes accounts;\\n}\\n\\nlibrary SwapDataHelperLib {\\n    function buildOutputMessage(\\n        bytes32 externalId,\\n        uint256 outputAmount,\\n        bytes memory receiver,\\n        bytes memory swapDataB\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            externalId,\\n            bytes32(outputAmount),\\n            uint16(receiver.length),\\n            uint16(swapDataB.length),\\n            receiver,\\n            swapDataB\\n        );\\n    }\\n\\n    function decodeMessage(bytes calldata message) public pure returns (DecodedMessage memory, MixSwapParams memory) {\\n        uint32 dstChainId;\\n        address targetZRC20;\\n        uint16 receiverLen;\\n        uint16 contractAddressLen;\\n        uint16 swapDataZLen;\\n        uint16 swapDataBLen;\\n        uint16 accountsLen;\\n\\n        assembly {\\n            dstChainId := shr(224, calldataload(message.offset)) // 4 bytes\\n            targetZRC20 := shr(96, calldataload(add(message.offset, 4))) // 20 bytes\\n            receiverLen := shr(240, calldataload(add(message.offset, 24))) // 2 bytes\\n            contractAddressLen := shr(240, calldataload(add(message.offset, 26))) // 2 bytes\\n            swapDataZLen := shr(240, calldataload(add(message.offset, 28))) // 2 bytes\\n            swapDataBLen := shr(240, calldataload(add(message.offset, 30))) // 2 bytes\\n            accountsLen := shr(240, calldataload(add(message.offset, 32))) // 2 bytes\\n        }\\n\\n        uint offset = 34; // header = 4 + 20 + 2\\u00d75 = 34\\n        bytes memory receiver = message[offset : offset + receiverLen];\\n        offset += receiverLen;\\n        bytes memory contractAddress = message[offset : offset + contractAddressLen];\\n        offset += contractAddressLen;\\n        bytes calldata swapDataZ = message[offset : offset + swapDataZLen];\\n        offset += swapDataZLen;\\n        bytes memory swapDataB = message[offset : offset + swapDataBLen];\\n        offset += swapDataBLen;\\n        bytes memory accounts = message[offset : offset + accountsLen];\\n\\n        DecodedMessage memory decoded = DecodedMessage({\\n            targetZRC20: targetZRC20,\\n            dstChainId: dstChainId,\\n            receiver: receiver,\\n            contractAddress: contractAddress,\\n            swapDataZ: swapDataZ,\\n            swapDataB: swapDataB,\\n            accounts: accounts\\n        });\\n\\n        MixSwapParams memory params = decodeCompressedMixSwapParams(swapDataZ);\\n\\n        return (decoded, params);\\n    }\\n\\n\\n    function decodeNativeMessage(\\n        bytes calldata message\\n    ) public pure returns (DecodedNativeMessage memory, MixSwapParams memory ) {\\n        // 20 bytes(evmAddress) + 20 bytes(targetZRC20) + bytes(swapData)\\n        address receiver = BytesHelperLib.bytesToAddress(message, 0); // 20\\n        address targetZRC20 = BytesHelperLib.bytesToAddress(message, 20); // 40\\n        bytes calldata swapData = message[40:];\\n        DecodedNativeMessage memory decoded = DecodedNativeMessage({\\n            receiver: receiver,\\n            targetZRC20: targetZRC20,\\n            swapData: swapData\\n        });\\n        MixSwapParams memory params = decodeCompressedMixSwapParams(swapData);\\n\\n        return (decoded, params);\\n    }\\n\\n    function decodeCompressedMixSwapParams(bytes calldata data) public pure returns (MixSwapParams memory) {\\n        if (data.length == 0) {\\n            return MixSwapParams({\\n                fromToken: address(0),\\n                toToken: address(0),\\n                fromTokenAmount: 0,\\n                expReturnAmount: 0,\\n                minReturnAmount: 0,\\n                mixAdapters: new address[](1),\\n                mixPairs: new address[](1),\\n                assetTo: new address[](1),\\n                directions: 0,\\n                moreInfo: new bytes[](1),\\n                feeData: new bytes(0),\\n                deadline: 0\\n            });\\n        }\\n\\n        unchecked {\\n            uint offset = 0;\\n            address fromToken;\\n            address toToken;\\n            uint256 fromTokenAmount;\\n            uint256 expReturnAmount;\\n            uint256 minReturnAmount;\\n            uint256 directions;\\n            uint256 deadline;\\n\\n            assembly {\\n                fromToken := shr(96, calldataload(add(data.offset, offset)))\\n                offset := add(offset, 20)\\n                toToken := shr(96, calldataload(add(data.offset, offset)))\\n                offset := add(offset, 20)\\n                fromTokenAmount := calldataload(add(data.offset, offset))\\n                offset := add(offset, 32)\\n                expReturnAmount := calldataload(add(data.offset, offset))\\n                offset := add(offset, 32)\\n                minReturnAmount := calldataload(add(data.offset, offset))\\n                offset := add(offset, 32)\\n                directions := calldataload(add(data.offset, offset))\\n                offset := add(offset, 32)\\n                deadline := calldataload(add(data.offset, offset))\\n                offset := add(offset, 32)\\n            }\\n\\n            // mixAdapters\\n            uint8 adapterLen = uint8(data[offset]);\\n            offset += 1;\\n            address[] memory mixAdapters = new address[](adapterLen);\\n            for (uint i = 0; i < adapterLen; ++i) {\\n                address a;\\n                assembly {\\n                    a := shr(96, calldataload(add(data.offset, offset)))\\n                }\\n                mixAdapters[i] = a;\\n                offset += 20;\\n            }\\n\\n            // mixPairs\\n            uint8 pairLen = uint8(data[offset]);\\n            offset += 1;\\n            address[] memory mixPairs = new address[](pairLen);\\n            for (uint i = 0; i < pairLen; ++i) {\\n                address p;\\n                assembly {\\n                    p := shr(96, calldataload(add(data.offset, offset)))\\n                }\\n                mixPairs[i] = p;\\n                offset += 20;\\n            }\\n\\n            // assetTo\\n            uint8 toLen = uint8(data[offset]);\\n            offset += 1;\\n            address[] memory assetTo = new address[](toLen);\\n            for (uint i = 0; i < toLen; ++i) {\\n                address t;\\n                assembly {\\n                    t := shr(96, calldataload(add(data.offset, offset)))\\n                }\\n                assetTo[i] = t;\\n                offset += 20;\\n            }\\n\\n            // moreInfo lengths\\n            uint8 infoCount = uint8(data[offset]);\\n            offset += 1;\\n            uint16[] memory lens = new uint16[](infoCount);\\n            for (uint i = 0; i < infoCount; ++i) {\\n                uint16 l;\\n                assembly {\\n                    l := shr(240, calldataload(add(data.offset, offset)))\\n                }\\n                lens[i] = l;\\n                offset += 2;\\n            }\\n\\n            // moreInfo contents\\n            bytes[] memory moreInfo = new bytes[](infoCount);\\n            for (uint i = 0; i < infoCount; ++i) {\\n                moreInfo[i] = data[offset : offset + lens[i]];\\n                offset += lens[i];\\n            }\\n\\n            // feeData\\n            uint16 feeLen;\\n            assembly {\\n                feeLen := shr(240, calldataload(add(data.offset, offset)))\\n            }\\n            offset += 2;\\n            bytes memory feeData = data[offset : offset + feeLen];\\n\\n            return MixSwapParams({\\n                fromToken: fromToken,\\n                toToken: toToken,\\n                fromTokenAmount: fromTokenAmount,\\n                expReturnAmount: expReturnAmount,\\n                minReturnAmount: minReturnAmount,\\n                mixAdapters: mixAdapters,\\n                mixPairs: mixPairs,\\n                assetTo: assetTo,\\n                directions: directions,\\n                moreInfo: moreInfo,\\n                feeData: feeData,\\n                deadline: deadline\\n            });\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x42fb40987c873260562d7bbc8bfed3d03909a80b571fb67ba8a2500cbf201e9c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60808060405234601957610d3c908161001f823930815050f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806360a85ed114610057578063634d45b214610052578063aa06aea51461004d5763fbaa267f1461004857600080fd5b610627565b6105bd565b610478565b60803660031901126100c65760443567ffffffffffffffff81116100c657610083903690600401610198565b60643567ffffffffffffffff81116100c6576100c2916100aa6100b6923690600401610198565b906024356004356106de565b604051918291826101fe565b0390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176100fd57604052565b6100cb565b90601f8019910116810190811067ffffffffffffffff8211176100fd57604052565b6040519061013360e083610102565b565b6040519061013361018083610102565b67ffffffffffffffff81116100fd57601f01601f191660200190565b92919261016d82610145565b9161017b6040519384610102565b8294818452818301116100c6578281602093846000960137010152565b9080601f830112156100c6578160206101b393359101610161565b90565b60005b8381106101c95750506000910152565b81810151838201526020016101b9565b906020916101f2815180928185528580860191016101b6565b601f01601f1916010190565b9060206101b39281815201906101d9565b9060206003198301126100c65760043567ffffffffffffffff81116100c657826023820112156100c65780600401359267ffffffffffffffff84116100c657602484830101116100c6576024019190565b906020808351928381520192019060005b81811061027e5750505090565b82516001600160a01b0316845260209384019390920191600101610271565b9080602083519182815201916020808360051b8301019401926000915b8383106102c957505050505090565b90919293946020806102e7600193601f1986820301875289516101d9565b970193019301919392906102ba565b80516001600160a01b03168252906020828101516001600160a01b031690820152604082015160408201526060820151606082015260808201516080820152610160806103b86103a461038461037261036060a089015161018060a08a0152610180890190610260565b60c089015188820360c08a0152610260565b60e088015187820360e0890152610260565b61010087015161010087015261012087015186820361012088015261029d565b6101408601518582036101408701526101d9565b93015191015290565b604080825282516001600160a01b031690820152602082015163ffffffff1660608201526101b392909161046a9060c061045561043f61042a610414604086015160e060808b01526101208a01906101d9565b6060860151898203603f190160a08b01526101d9565b6080850151888203603f1901858a01526101d9565b60a0840151878203603f190160e08901526101d9565b910151848203603f19016101008601526101d9565b9160208184039101526102f6565b6105ad6104843661020f565b61048f929192610754565b5061049861079d565b50610522601884013560f01c80601a86013560f01c6105626104ec601c89013560f01c9661054a6105306105288c8b856105196104f96104f36104ec6104e5601e88013560f01c9f61080d565b858861083e565b3691610161565b9d61080d565b9a6105136104ec8d61050b8482610831565b90868961085b565b9b610831565b9c8d9283610831565b9261085b565b9a9099610831565b956105446104ec8d89866105228683610831565b96610831565b61055b60208c013560f01c82610831565b918b61085b565b9261058461056e610124565b60048a013560601c8152983560e01c60208a0152565b6040880152610594368686610161565b6060880152608087015260a086015260c08501526109ca565b906100c2604051928392836103c1565b6100c26105d26105cc3661020f565b906109ca565b6040519182916020835260208301906102f6565b909161046a60406101b39481855260018060a01b038151168286015260018060a01b03602082015116606086015201516060608085015260a08401906101d9565b6106303661020f565b90606060408051610640816100e1565b6000815260006020820152015261065561079d565b506000826014116106db5750601461066e368284610161565b01519161067b8183610ce9565b90806028116100c6576106b660286106cb9401916027190192604051956106a1876100e1565b6001600160a01b039081168752166020860152565b6106c1368383610161565b60408501526109ca565b906100c2604051928392836105e6565b80fd5b90926064906101b39380518251906040519788966020880152604087015261ffff60f01b9060f01b16606086015261ffff60f01b9060f01b16606285015261072f81518092602086880191016101b6565b830161074482518093602086850191016101b6565b010103601f198101835282610102565b6040519060e0820182811067ffffffffffffffff8211176100fd57604052606060c083600081526000602082015282604082015282808201528260808201528260a08201520152565b60405190610180820182811067ffffffffffffffff8211176100fd57604052600061016083828152826020820152826040820152826060820152826080820152606060a0820152606060c0820152606060e082015282610100820152606061012082015260606101408201520152565b602201908160221161081b57565b634e487b7160e01b600052601160045260246000fd5b9190820180921161081b57565b90929192836022116100c65783116100c657602201916021190190565b909392938483116100c65784116100c6578101920390565b67ffffffffffffffff81116100fd5760051b60200190565b6040805190919061089c8382610102565b6001815291601f1901366020840137565b906108b782610873565b6108c46040519182610102565b82815280926108d5601f1991610873565b0190602036910137565b604080519091906108f08382610102565b6001815291601f19018260005b82811061090957505050565b8060606020809385010152016108fd565b9061092482610873565b6109316040519182610102565b8281528092610942601f1991610873565b019060005b82811061095357505050565b806060602080938501015201610947565b60405190610973602083610102565b6000808352366020840137565b634e487b7160e01b600052603260045260246000fd5b9060c810156109a55760c80190565b610980565b908210156109a5570190565b80518210156109a55760209160051b010190565b9190916109d561079d565b508215610c6557610a006109fa6109ec8584610996565b356001600160f81b03191690565b60f81c90565b60ff169060c9610a0f836108ad565b926000905b808210610c4157505060ff6001610a326109fa6109ec858a886109aa565b9201911690610a40826108ad565b916000905b808210610c1d57505060ff6001610a636109fa6109ec858b896109aa565b92019116610a70816108ad565b906000905b808210610bea57505060ff6001610a936109fa6109ec868c8a6109aa565b9301921691610aa1836108ad565b60005b848110610bb95750610ab58461091a565b936000915b818310610b53575050506104ec8160a8979899600280610ae6958a013560f01c8401019201908861085b565b92610aef610135565b853560601c815296601486013560601c602089015260288601356040890152604886013560608901526068860135608089015260a088015260c087015260e08601526088830135610100860152610120850152610140840152013561016082015290565b90919280610b896104ec8d600194610b80610b79610b718b8a6109b6565b5161ffff1690565b61ffff1690565b8101918d61085b565b610b9386896109b6565b52610b9e85886109b6565b50610baf610b79610b7187866109b6565b0193019190610aba565b91600281610bdf6001938a989598013560f01c610bd6878a6109b6565b9061ffff169052565b019201939093610aa4565b9092601481610c1460019389013560601c610c0588886109b6565b6001600160a01b039091169052565b01930190610a75565b9091601481610c3860019388013560601c610c0587896109b6565b01920190610a45565b9091601481610c5c60019387013560601c610c05878a6109b6565b01920190610a14565b509050610c7061088b565b610c7861088b565b610c8061088b565b610c886108df565b90610c91610964565b92610c9a610135565b94600086526000602087015260006040870152600060608701526000608087015260a086015260c085015260e08401526000610100840152610120830152610140820152600061016082015290565b906028116100c657610d016014809201823691610161565b01519056fea264697066735822122069422524699ca99cce9fa7587a84c3048469de59f7f7318ee7ac0fce00ec920c64736f6c634300081a0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806360a85ed114610057578063634d45b214610052578063aa06aea51461004d5763fbaa267f1461004857600080fd5b610627565b6105bd565b610478565b60803660031901126100c65760443567ffffffffffffffff81116100c657610083903690600401610198565b60643567ffffffffffffffff81116100c6576100c2916100aa6100b6923690600401610198565b906024356004356106de565b604051918291826101fe565b0390f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176100fd57604052565b6100cb565b90601f8019910116810190811067ffffffffffffffff8211176100fd57604052565b6040519061013360e083610102565b565b6040519061013361018083610102565b67ffffffffffffffff81116100fd57601f01601f191660200190565b92919261016d82610145565b9161017b6040519384610102565b8294818452818301116100c6578281602093846000960137010152565b9080601f830112156100c6578160206101b393359101610161565b90565b60005b8381106101c95750506000910152565b81810151838201526020016101b9565b906020916101f2815180928185528580860191016101b6565b601f01601f1916010190565b9060206101b39281815201906101d9565b9060206003198301126100c65760043567ffffffffffffffff81116100c657826023820112156100c65780600401359267ffffffffffffffff84116100c657602484830101116100c6576024019190565b906020808351928381520192019060005b81811061027e5750505090565b82516001600160a01b0316845260209384019390920191600101610271565b9080602083519182815201916020808360051b8301019401926000915b8383106102c957505050505090565b90919293946020806102e7600193601f1986820301875289516101d9565b970193019301919392906102ba565b80516001600160a01b03168252906020828101516001600160a01b031690820152604082015160408201526060820151606082015260808201516080820152610160806103b86103a461038461037261036060a089015161018060a08a0152610180890190610260565b60c089015188820360c08a0152610260565b60e088015187820360e0890152610260565b61010087015161010087015261012087015186820361012088015261029d565b6101408601518582036101408701526101d9565b93015191015290565b604080825282516001600160a01b031690820152602082015163ffffffff1660608201526101b392909161046a9060c061045561043f61042a610414604086015160e060808b01526101208a01906101d9565b6060860151898203603f190160a08b01526101d9565b6080850151888203603f1901858a01526101d9565b60a0840151878203603f190160e08901526101d9565b910151848203603f19016101008601526101d9565b9160208184039101526102f6565b6105ad6104843661020f565b61048f929192610754565b5061049861079d565b50610522601884013560f01c80601a86013560f01c6105626104ec601c89013560f01c9661054a6105306105288c8b856105196104f96104f36104ec6104e5601e88013560f01c9f61080d565b858861083e565b3691610161565b9d61080d565b9a6105136104ec8d61050b8482610831565b90868961085b565b9b610831565b9c8d9283610831565b9261085b565b9a9099610831565b956105446104ec8d89866105228683610831565b96610831565b61055b60208c013560f01c82610831565b918b61085b565b9261058461056e610124565b60048a013560601c8152983560e01c60208a0152565b6040880152610594368686610161565b6060880152608087015260a086015260c08501526109ca565b906100c2604051928392836103c1565b6100c26105d26105cc3661020f565b906109ca565b6040519182916020835260208301906102f6565b909161046a60406101b39481855260018060a01b038151168286015260018060a01b03602082015116606086015201516060608085015260a08401906101d9565b6106303661020f565b90606060408051610640816100e1565b6000815260006020820152015261065561079d565b506000826014116106db5750601461066e368284610161565b01519161067b8183610ce9565b90806028116100c6576106b660286106cb9401916027190192604051956106a1876100e1565b6001600160a01b039081168752166020860152565b6106c1368383610161565b60408501526109ca565b906100c2604051928392836105e6565b80fd5b90926064906101b39380518251906040519788966020880152604087015261ffff60f01b9060f01b16606086015261ffff60f01b9060f01b16606285015261072f81518092602086880191016101b6565b830161074482518093602086850191016101b6565b010103601f198101835282610102565b6040519060e0820182811067ffffffffffffffff8211176100fd57604052606060c083600081526000602082015282604082015282808201528260808201528260a08201520152565b60405190610180820182811067ffffffffffffffff8211176100fd57604052600061016083828152826020820152826040820152826060820152826080820152606060a0820152606060c0820152606060e082015282610100820152606061012082015260606101408201520152565b602201908160221161081b57565b634e487b7160e01b600052601160045260246000fd5b9190820180921161081b57565b90929192836022116100c65783116100c657602201916021190190565b909392938483116100c65784116100c6578101920390565b67ffffffffffffffff81116100fd5760051b60200190565b6040805190919061089c8382610102565b6001815291601f1901366020840137565b906108b782610873565b6108c46040519182610102565b82815280926108d5601f1991610873565b0190602036910137565b604080519091906108f08382610102565b6001815291601f19018260005b82811061090957505050565b8060606020809385010152016108fd565b9061092482610873565b6109316040519182610102565b8281528092610942601f1991610873565b019060005b82811061095357505050565b806060602080938501015201610947565b60405190610973602083610102565b6000808352366020840137565b634e487b7160e01b600052603260045260246000fd5b9060c810156109a55760c80190565b610980565b908210156109a5570190565b80518210156109a55760209160051b010190565b9190916109d561079d565b508215610c6557610a006109fa6109ec8584610996565b356001600160f81b03191690565b60f81c90565b60ff169060c9610a0f836108ad565b926000905b808210610c4157505060ff6001610a326109fa6109ec858a886109aa565b9201911690610a40826108ad565b916000905b808210610c1d57505060ff6001610a636109fa6109ec858b896109aa565b92019116610a70816108ad565b906000905b808210610bea57505060ff6001610a936109fa6109ec868c8a6109aa565b9301921691610aa1836108ad565b60005b848110610bb95750610ab58461091a565b936000915b818310610b53575050506104ec8160a8979899600280610ae6958a013560f01c8401019201908861085b565b92610aef610135565b853560601c815296601486013560601c602089015260288601356040890152604886013560608901526068860135608089015260a088015260c087015260e08601526088830135610100860152610120850152610140840152013561016082015290565b90919280610b896104ec8d600194610b80610b79610b718b8a6109b6565b5161ffff1690565b61ffff1690565b8101918d61085b565b610b9386896109b6565b52610b9e85886109b6565b50610baf610b79610b7187866109b6565b0193019190610aba565b91600281610bdf6001938a989598013560f01c610bd6878a6109b6565b9061ffff169052565b019201939093610aa4565b9092601481610c1460019389013560601c610c0588886109b6565b6001600160a01b039091169052565b01930190610a75565b9091601481610c3860019388013560601c610c0587896109b6565b01920190610a45565b9091601481610c5c60019387013560601c610c05878a6109b6565b01920190610a14565b509050610c7061088b565b610c7861088b565b610c8061088b565b610c886108df565b90610c91610964565b92610c9a610135565b94600086526000602087015260006040870152600060608701526000608087015260a086015260c085015260e08401526000610100840152610120830152610140820152600061016082015290565b906028116100c657610d016014809201823691610161565b01519056fea264697066735822122069422524699ca99cce9fa7587a84c3048469de59f7f7318ee7ac0fce00ec920c64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}